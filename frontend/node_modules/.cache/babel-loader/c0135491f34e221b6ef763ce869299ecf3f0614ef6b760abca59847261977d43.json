{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\LOG\\\\frontend\\\\src\\\\pages\\\\UserDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserPage() {\n  _s();\n  const [hotels, setHotels] = useState([]); // initialisé comme tableau\n\n  useEffect(() => {\n    // Exemple de récupération des données (remplace par ta vraie URL)\n    fetch('https://api.example.com/hotels').then(res => res.json()).then(data => {\n      console.log('Données reçues:', data);\n      if (Array.isArray(data)) {\n        setHotels(data); // on met à jour seulement si c’est un tableau\n      } else {\n        // sinon on vide ou on gère l’erreur\n        setHotels([]);\n        console.error('Erreur : données hotels ne sont pas un tableau');\n      }\n    }).catch(err => {\n      console.error('Erreur fetch:', err);\n      setHotels([]);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Liste des h\\xF4tels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), Array.isArray(hotels) && hotels.length > 0 ? hotels.map(hotel => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: hotel.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: hotel.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this)]\n    }, hotel.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Aucun h\\xF4tel disponible.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(UserPage, \"Gakc+Y7g9A1UZYw8Op/kyzheHeo=\");\n_c = UserPage;\nexport default UserPage;\nvar _c;\n$RefreshReg$(_c, \"UserPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","UserPage","_s","hotels","setHotels","fetch","then","res","json","data","console","log","Array","isArray","error","catch","err","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","hotel","name","description","id","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/LOG/frontend/src/pages/UserDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction UserPage() {\r\n  const [hotels, setHotels] = useState([]); // initialisé comme tableau\r\n\r\n  useEffect(() => {\r\n    // Exemple de récupération des données (remplace par ta vraie URL)\r\n    fetch('https://api.example.com/hotels')\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log('Données reçues:', data);\r\n        if (Array.isArray(data)) {\r\n          setHotels(data); // on met à jour seulement si c’est un tableau\r\n        } else {\r\n          // sinon on vide ou on gère l’erreur\r\n          setHotels([]);\r\n          console.error('Erreur : données hotels ne sont pas un tableau');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.error('Erreur fetch:', err);\r\n        setHotels([]);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Liste des hôtels</h1>\r\n      {Array.isArray(hotels) && hotels.length > 0 ? (\r\n        hotels.map((hotel) => (\r\n          <div key={hotel.id}>\r\n            <h2>{hotel.name}</h2>\r\n            <p>{hotel.description}</p>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>Aucun hôtel disponible.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE1CC,SAAS,CAAC,MAAM;IACd;IACAO,KAAK,CAAC,gCAAgC,CAAC,CACpCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACdC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,IAAI,CAAC;MACpC,IAAIG,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,EAAE;QACvBL,SAAS,CAACK,IAAI,CAAC,CAAC,CAAC;MACnB,CAAC,MAAM;QACL;QACAL,SAAS,CAAC,EAAE,CAAC;QACbM,OAAO,CAACI,KAAK,CAAC,gDAAgD,CAAC;MACjE;IACF,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAK;MACdN,OAAO,CAACI,KAAK,CAAC,eAAe,EAAEE,GAAG,CAAC;MACnCZ,SAAS,CAAC,EAAE,CAAC;IACf,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEJ,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACxBT,KAAK,CAACC,OAAO,CAACV,MAAM,CAAC,IAAIA,MAAM,CAACmB,MAAM,GAAG,CAAC,GACzCnB,MAAM,CAACoB,GAAG,CAAEC,KAAK,iBACfxB,OAAA;MAAAiB,QAAA,gBACEjB,OAAA;QAAAiB,QAAA,EAAKO,KAAK,CAACC;MAAI;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrBrB,OAAA;QAAAiB,QAAA,EAAIO,KAAK,CAACE;MAAW;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAFlBG,KAAK,CAACG,EAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGb,CACN,CAAC,gBAEFrB,OAAA;MAAAiB,QAAA,EAAG;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC9B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACnB,EAAA,CAtCQD,QAAQ;AAAA2B,EAAA,GAAR3B,QAAQ;AAwCjB,eAAeA,QAAQ;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}